<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
	namespace: 名称空间. 是对当前 Mapper 文件的唯一标示.
	通常以 (实体类类名 + Mapper) 结尾
-->
<mapper namespace="com.adolph.mapper.PeopleMapper">

    <!--
        对于 Oracle 和 MySQL 而言. 插入一条记录的 SQL 是不一样的!
        MySQL:
        INSERT INTO people(last_name, first_name)
        VALUES(#{lastName}, #{firstName})

        Oracle:
        INSERT INTO people(id, last_name, first_name)
        VALUES(crm_seq.nextval, #{lastName}, #{firstName})
    -->
    <!--
        <insert id="testDatabaseId" databaseId="mysql">
            INSERT INTO people(last_name, first_name)
            VALUES(#{lastName}, #{firstName})
        </insert>

        <insert id="testDatabaseId" databaseId="oracle">
            INSERT INTO people(id, last_name, first_name)
            VALUES(my_seq.nextval, #{lastName}, #{firstName})
        </insert>
    -->

    <!--
        keyProperty: 把主键值赋给 bean 的哪一个属性
        keyColumn: 使用哪一列的值来进行赋值
        useGeneratedKeys="true": 使用自增的方式来生成主键值
    -->
    <insert id="testDatabaseId" databaseId="mysql" keyProperty="id" keyColumn="id" useGeneratedKeys="true">
        INSERT INTO people(last_name, first_name)
        VALUES(#{lastName}, #{firstName})
    </insert>

    <insert id="testDatabaseId" databaseId="oracle">
        <!--
            对于 Oracle 而言, 需要使用 selectKey 来生成主键值
            order="BEFORE": 先于 INSERT 执行
            selectKey 的标签体: 指定生成主键的查询语句. SELECT 序列名.nextval FROM dual
            keyProperty: 把标签体的查询结果赋给 bean 的哪一个属性.
            resultType: 执行标签体查询的结果类型.
            注意: 下面编写 SQL 时, 主键不能再次使用序列生成. 而要使用 #{keyProperty}
        -->
        <selectKey order="BEFORE" keyProperty="id" resultType="int">
            SELECT my_seq.nextval FROM dual
        </selectKey>
        INSERT INTO people(id, last_name, first_name)
        VALUES(#{id}, #{lastName}, #{firstName})
    </insert>

    <insert id="saveId">
        INSERT INTO people(id, last_name)
        VALUES(#{id}, #{lastName})
    </insert>

    <insert id="saveMap">
        INSERT INTO people(last_name, first_name)
        VALUES(#{lastName}, #{firstName})
    </insert>

    <insert id="saveParams">
        INSERT INTO people(last_name, age)
        VALUES(#{lastName}, #{age})
    </insert>

    <insert id="savePeople">
        INSERT INTO people (last_name, age, first_name)
        VALUES(#{lastName}, #{age}, #{firstName})
    </insert>
    <!--
        映射一个查询语句
        1. id 唯一标识改查询语句. 可以通过当前映射文件的 namespace 和 id 来唯一的定位到当前的 select.
        2. resultType 指定返回值的类型. 通常为全类名.
        3. 注意: 若类的属性名和数据表的列名不一致, 则可以使用别名
    -->
    <select id="selectPeople" resultType="com.adolph.beans.People">
        select id, last_name AS "lastName" from people where id = #{id}
    </select>

</mapper>